---
layout: post
title: LRU算法
date: "2020-10-12 13:30:00 -0700"
tags: [interview, algorithm]
---

LRU: Least Recently Used, 最近最少使用算法。例如浏览器访问服务器的缓存，为了保证相应速度，缓存使用比较昂贵的硬件比如RAM，因为缓存是有限的，因此需要一些算法来淘汰缓存中相对不常用的数据。LRU即是一种**缓存淘汰算法**（在OS中也叫内存换页算法）。

LRU算法可以通过一个列表来实现。有新数据时插入表头，当列表满后从表尾淘汰数据。若新加入数据命中，将其移至表头，相当于新插入数据。也就是说常用的数据会一直在头部，而不常用的则会被淘汰。

根据以上描述，List就可以实现LRU，但判断是否命中效率非常低。我们需要一个有序的dict来实现相对高效的LRU，在Python的collections中有个OrderedDict数据结构可以用。

```
class LRUCache:

    def __init__(self, capacity):
       self.capacity = capacity
       self.queue = collections.OrderedDict(0

    def get(self, key):
        if key not in self.queue:
            return -1
        value = self.queue.pop(key)
        self.queue[key] = value # 将命中的数据重新添加至头部
        return self.queue[key]

    def put(self, key):
        if key in self.queue: # 若命中，则删除老数据
            self.queue.pop(key)
        elif len(self.queue.items()) == self.capacity: # 未命中，且队列满，则删除最后一个数据
            self.queue.popitem() # 删除最后添加的键值，网上有说随机删除一对并不准确
        
        self.queue[key] = value
```
